#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
char matrix[SIZE][SIZE];
void generateKeyMatrix(char key[]) {
    int used[26] = {0};
    int i, j = 0, k = 0;
    char ch;
    for (i = 0; key[i]; i++) {
        ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';

        if (ch >= 'A' && ch <= 'Z' && !used[ch - 'A']) {
            matrix[k / SIZE][k % SIZE] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }
    for (i = 0; i < 26; i++) {
        if (i + 'A' == 'J') continue; 
        if (!used[i]) {
            matrix[k / SIZE][k % SIZE] = i + 'A';
            used[i] = 1;
            k++;
        }
    }
}
void findPosition(char ch, int *row, int *col) {
    int i, j;
    if (ch == 'J') ch = 'I'; 

    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void decryptPair(char a, char b, char *res) {
    int row1, col1, row2, col2;
    findPosition(a, &row1, &col1);
    findPosition(b, &row2, &col2);
    if (row1 == row2) {
        res[0] = matrix[row1][(col1 + SIZE - 1) % SIZE];
        res[1] = matrix[row2][(col2 + SIZE - 1) % SIZE];
    } else if (col1 == col2) {
        res[0] = matrix[(row1 + SIZE - 1) % SIZE][col1];
        res[1] = matrix[(row2 + SIZE - 1) % SIZE][col2];
    } else {
        res[0] = matrix[row1][col2];
        res[1] = matrix[row2][col1];
    }
}
void decryptMessage(char ciphertext[]) {
    char a, b, res[3];
    res[2] = '\0';
    for (int i = 0; i < strlen(ciphertext); i += 2) {
        a = toupper(ciphertext[i]);
        b = toupper(ciphertext[i + 1]);
        if (a == 'J') a = 'I';
        if (b == 'J') b = 'I';
        decryptPair(a, b, res);
        printf("%s", res);
    }
    printf("\n");
}
int main() {
    char keyword[] = "PLAYFAIR";  
    char message[] =
        "KXJEYUREBEZWEHEWRYTUHEYFS"
        "KREHEGOYFIWTTTUOLKSYCAJPO"
        "BOTEIZONTXBYBNTGONEYCUZWR"
        "GDSONSXBOUYWRHEBAAHYUSEDQ";
    printf("Decrypting Playfair Cipher...\n");
    generateKeyMatrix(keyword);
    decryptMessage(message);
    return 0;
}
