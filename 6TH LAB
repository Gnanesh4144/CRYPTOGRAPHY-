#include <stdio.h>
#include <string.h>
#include <ctype.h>
int modInverse(int a) {
    a = a % 26;
    for (int x = 1; x < 26; x++)
        if ((a * x) % 26 == 1)
            return x;
    return -1;
}
char decryptChar(char ch, int a, int b) {
    if (!isalpha(ch)) return ch;
    ch = toupper(ch);
    int y = ch - 'A';
    int a_inv = modInverse(a);
    if (a_inv == -1) return '?';
    int p = (a_inv * (y - b + 26)) % 26;
    return p + 'A';
}
int solveKey(int c1, int c2, int p1, int p2, int* a, int* b) {
    int diffP = (p1 - p2 + 26) % 26;
    int diffC = (c1 - c2 + 26) % 26;
    int inv = modInverse(diffP);
    if (inv == -1) return 0;
    *a = (diffC * inv) % 26;
    *b = (c1 - (*a * p1 % 26) + 26) % 26;
     return 1;
}

int main() {
    char ciphertext[1000] = "BUBUBUBUBUBUBUBUBUBU";
    char plaintext[1000];
    int a, b;
    int p1 = 4, c1 = 1;
    int p2 = 19, c2 = 20;
    if (!solveKey(c1, c2, p1, p2, &a, &b)) {
        printf("Unable to find valid 'a'. Decryption not possible.\n");
        return 1;
    }
    printf("Recovered Key: a = %d, b = %d\n", a, b);
    for (int i = 0; i < strlen(ciphertext); i++) {
        plaintext[i] = decryptChar(ciphertext[i], a, b);
    }
    plaintext[strlen(ciphertext)] = '\0';
    printf("Decrypted Text: %s\n", plaintext);
    return 0;
}
