#include <stdio.h>
#include <string.h>
#include <ctype.h>
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}
int modInverse(int a) {
    a = a % 26;
    for (int x = 1; x < 26; x++) {
        if ((a * x) % 26 == 1)
            return x;
    }
    return -1;
}
char affineEncryptChar(char ch, int a, int b) {
    if (isalpha(ch)) {
        ch = toupper(ch);
        int x = ch - 'A';
        int e = (a * x + b) % 26;
        return e + 'A';
    }
    return ch;
}
char affineDecryptChar(char ch, int a, int b) {
    if (isalpha(ch)) {
        ch = toupper(ch);
        int a_inv = modInverse(a);
        if (a_inv == -1) return '?'; 
        int y = ch - 'A';
        int d = (a_inv * (y - b + 26)) % 26;
        return d + 'A';
    }
    return ch;
}

int main() {
    char plaintext[1000], ciphertext[1000], decrypted[1000];
    int a, b;

    printf("Enter values for 'a' and 'b' (a must be coprime to 26): ");
    scanf("%d %d", &a, &b);

    if (gcd(a, 26) != 1) {
        printf("Invalid value for 'a'. It must be coprime to 26.\n");
        return 1;
    }

    printf("Enter the plaintext (letters only): ");
    scanf(" %[^\n]", plaintext);


    for (int i = 0; i < strlen(plaintext); i++)
        ciphertext[i] = affineEncryptChar(plaintext[i], a, b);
    ciphertext[strlen(plaintext)] = '\0';

    printf("Encrypted: %s\n", ciphertext);


    for (int i = 0; i < strlen(ciphertext); i++)
        decrypted[i] = affineDecryptChar(ciphertext[i], a, b);
    decrypted[strlen(ciphertext)] = '\0';

    printf("Decrypted: %s\n", decrypted);

    return 0;
}
