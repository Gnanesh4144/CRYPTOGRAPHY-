#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
char matrix[SIZE][SIZE];
void generateMatrix(char* key) {
int alpha[26] = {0};
int i, j, k = 0;
alpha['j' - 'a'] = 1;
for (i = 0; key[i]; i++) {
char ch = tolower(key[i]);
if (ch == 'j') ch = 'i';
if (isalpha(ch) && !alpha[ch - 'a']) {
matrix[k / SIZE][k % SIZE] = ch;
alpha[ch - 'a'] = 1;
k++;
}
}
for (i = 0; i < 26; i++) {
if (!alpha[i]) {
matrix[k / SIZE][k % SIZE] = i + 'a';
k++;
}
}
}
void prepareText(char* input, char* output) {
int i, j = 0;
for (i = 0; input[i]; i++) {
if (isalpha(input[i])) {
char ch = tolower(input[i]);
output[j++] = (ch == 'j') ? 'i' : ch;
}
}
output[j] = '\0';
for (i = 0; i < j; i += 2) {
if (output[i] == output[i + 1]) {
memmove(output + i + 2, output + i + 1, strlen(output) - i);
output[i + 1] = 'x';
j++;
}
}
if (j % 2 != 0) {
output[j++] = 'x';
output[j] = '\0';
}
}
void findPosition(char ch, int* row, int* col) {
for (int i = 0; i < SIZE; i++)
for (int j = 0; j < SIZE; j++)
if (matrix[i][j] == ch) {
*row = i;
*col = j;
return;
}
}
void encrypt(char* plaintext, char* ciphertext) {
int i;
for (i = 0; plaintext[i]; i += 2) {
int r1, c1, r2, c2;
findPosition(plaintext[i], &r1, &c1);
findPosition(plaintext[i + 1], &r2, &c2);
if (r1 == r2) {
ciphertext[i] = matrix[r1][(c1 + 1) % SIZE];
ciphertext[i + 1] = matrix[r2][(c2 + 1) % SIZE];
} else if (c1 == c2) {
ciphertext[i] = matrix[(r1 + 1) % SIZE][c1];
ciphertext[i + 1] = matrix[(r2 + 1) % SIZE][c2];
} else {
ciphertext[i] = matrix[r1][c2];
ciphertext[i + 1] = matrix[r2][c1];
}
}
ciphertext[i] = '\0';
}MONARCHY
void printMatrix() {
printf("Playfair Matrix:\n");
for (int i = 0; i < SIZE; i++) {
for (int j = 0; j < SIZE; j++) {
printf("%c ", matrix[i][j]);
}
printf("\n");
}
}

int main() {
char key[100], plaintext[1000], formatted[1000], ciphertext[1000];
printf("Enter keyword: ");
scanf("%s", key);
printf("Enter plaintext: ");
scanf(" %[^\n]", plaintext);
generateMatrix(key);
printMatrix();
prepareText(plaintext, formatted);
encrypt(formatted, ciphertext);
printf("Formatted Plaintext: %s\n", formatted);
printf("Encrypted Ciphertext: %s\n", ciphertext);
return 0;
}
